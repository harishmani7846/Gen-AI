# -*- coding: utf-8 -*-
"""keras.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_M8oOjU_Jx1u7_rguxRbWPO4Xki_hhiW
"""

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

sequence = np.array([i for i in range(1, 101)])
window_size = 3
x, y = [], []

for i in range(len(sequence) - window_size):
    x.append(sequence[i:i + window_size])
    y.append(sequence[i + window_size])

x = np.array(x).reshape((-1, window_size, 1))
y = np.array(y)

model = Sequential([
    SimpleRNN(50, activation='relu', input_shape=(window_size, 1)),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
model.fit(x, y, epochs=1000, verbose=0)

# âœ… Save without training config (so no 'mse')
model.save("clean_rnn_model.h5", include_optimizer=False)

import joblib

class KerasModelWrapper:
    def __init__(self, model_path):
        self.model_path = model_path
    def load(self):
        from tensorflow.keras.models import load_model
        return load_model(self.model_path, compile=False)

wrapper = KerasModelWrapper("clean_rnn_model.h5")
joblib.dump(wrapper, "clean_rnn_model.pkl")

import numpy as np
wrapper = joblib.load("clean_rnn_model.pkl")
model = wrapper.load()

test_input = np.array([11, 12, 13]).reshape((1, 3, 1))
prediction = model.predict(test_input)
print("âœ… Prediction:", prediction)

import numpy as np
import streamlit as st
from tensorflow.keras.models import load_model

# Load model (from .h5 or via a .pkl wrapper)
@st.cache_resource
def load_rnn_model():
    return load_model("rnn_model.h5", compile=False)

model = load_rnn_model()

# UI Title
st.title("ðŸ”¢ RNN Sequence Predictor")
st.write("Enter 3 numbers in sequence and the model will predict the next one!")

# Input fields
num1 = st.number_input("Enter first number", min_value=0, step=1, value=10)
num2 = st.number_input("Enter second number", min_value=0, step=1, value=11)
num3 = st.number_input("Enter third number", min_value=0, step=1, value=12)

# Prediction button
if st.button("ðŸ”® Predict Next Number"):
    input_seq = np.array([num1, num2, num3]).reshape((1, 3, 1))
    prediction = model.predict(input_seq, verbose=0)
    st.success(f"ðŸ“ˆ Predicted next number: {prediction[0][0]:.2f}")

pip install streamlit
